{"info":{"type":"runner","start":"2021-06-08T10:40:15.304Z","_duration":64822,"cid":"0-1","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"91.0.4472.77","chrome":{"chromedriverVersion":"91.0.4472.19 (1bf021f248676a0b2ab3ee0561d83a59e424c23e-refs/branch-heads/4472@{#288})","userDataDir":"C:\\Users\\Pradeep\\AppData\\Local\\Temp\\scoped_dir8916_1384797410"},"goog:chromeOptions":{"debuggerAddress":"localhost:57452"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"webdriver.remote.sessionid":"f0b78639ab7fb9c6e27f6a6222003683","sessionId":"f0b78639ab7fb9c6e27f6a6222003683"},"sanitizedCapabilities":"chrome.91_0_4472_77.windows","config":{"protocol":"http","hostname":"localhost","port":4444,"path":"/wd/hub","capabilities":{"browserName":"chrome"},"logLevel":"info","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"strictSSL":true,"requestedCapabilities":{"browserName":"chrome"},"specs":["C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/demo.js"],"exclude":[],"suites":{"smoke":["C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/demo.js","C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/firstTest.js","C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/sample.js"],"regression":["C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/loginTest.js","C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/example.e2e.js"]},"baseUrl":"http://localhost","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",[null,{"debug":true,"outputDir":"./reports/html-reports/","filename":"report.html","reportTitle":"Test Report Title","showInBrowser":true,"collapseTests":false,"useOnAfterCommandForScreenshot":false}],["allure",{"outputDir":"allure-results","disableWebdriverStepsReporting":true,"disableWebdriverScreenshotsReporting":false}]],"services":["selenium-standalone"],"execArgv":[],"maxInstances":2,"maxInstancesPerCapability":100,"filesToWatch":[],"onPrepare":[],"onWorkerStart":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[],"onReload":[],"automationProtocol":"webdriver"},"specs":["C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js"],"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","isMultiremote":false,"instanceOptions":{"f0b78639ab7fb9c6e27f6a6222003683":{"protocol":"http","hostname":"localhost","port":4444,"path":"/wd/hub","capabilities":{"browserName":"chrome"},"logLevel":"info","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"strictSSL":true,"requestedCapabilities":{"browserName":"chrome"},"specs":["C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/demo.js"],"exclude":[],"suites":{"smoke":["C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/demo.js","C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/firstTest.js","C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/sample.js"],"regression":["C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/loginTest.js","C:/Users/Pradeep/Desktop/demo_webdriverIO/test/specs/example.e2e.js"]},"baseUrl":"http://localhost","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",[null,{"debug":true,"outputDir":"./reports/html-reports/","filename":"report.html","reportTitle":"Test Report Title","showInBrowser":true,"collapseTests":false,"useOnAfterCommandForScreenshot":false}],["allure",{"outputDir":"allure-results","disableWebdriverStepsReporting":true,"disableWebdriverScreenshotsReporting":false}]],"services":["selenium-standalone"],"execArgv":[],"maxInstances":2,"maxInstancesPerCapability":100,"filesToWatch":[],"onPrepare":[],"onWorkerStart":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[],"onReload":[],"automationProtocol":"webdriver"}},"retry":0,"failures":1,"retries":0,"end":"2021-06-08T10:41:20.126Z"},"metrics":{"passed":0,"skipped":0,"failed":1,"start":"2021-06-08T10:40:15.304Z","end":"2021-06-08T10:41:20.126Z","duration":64822},"suites":[{"type":"suite","start":"2021-06-08T10:40:15.312Z","_duration":60161,"tests":[{"type":"test","start":"2021-06-08T10:40:15.312Z","_duration":60157,"uid":"test-00-0","cid":"0-1","title":"deals with webElements","fullTitle":"first test suite deals with webElements","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://rahulshettyacademy.com/AutomationPractice/"},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://rahulshettyacademy.com/AutomationPractice/"},"result":{"value":null},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"xpath","value":"//input[@value=\"radio1\"]"},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"xpath","value":"//input[@value=\"radio1\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"6541a1f4-4723-4de9-9678-456f21c6d780"}},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/6541a1f4-4723-4de9-9678-456f21c6d780/click","body":{},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/6541a1f4-4723-4de9-9678-456f21c6d780/click","body":{},"result":{"value":null},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/6541a1f4-4723-4de9-9678-456f21c6d780/selected","body":{},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/6541a1f4-4723-4de9-9678-456f21c6d780/selected","body":{},"result":{"value":true},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"xpath","value":"//a[text() = \"Latest News\"]"},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"xpath","value":"//a[text() = \"Latest News\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"result":{"value":true},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementInViewport(elem) {\n    if (!elem.getBoundingClientRect) {\n        return false;\n    }\n    const rect = elem.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n    return (vertInView && horInView);\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementInViewport(elem) {\n    if (!elem.getBoundingClientRect) {\n        return false;\n    }\n    const rect = elem.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n    return (vertInView && horInView);\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"result":{"value":false},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"result":{"value":true},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementInViewport(elem) {\n    if (!elem.getBoundingClientRect) {\n        return false;\n    }\n    const rect = elem.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n    return (vertInView && horInView);\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementInViewport(elem) {\n    if (!elem.getBoundingClientRect) {\n        return false;\n    }\n    const rect = elem.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n    return (vertInView && horInView);\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"result":{"value":false},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":"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ZREREZHhxKWlpaVlqDshIiI3hurqatzc3HB1dcXFxaX9cc2cP8Dm3YXcPGUJK6f7d3nZ8k4ye4rBd2oSSfdqaFRkuGtpaWl/NDc309TUhK+v/t+VgXs1/2MyCv801N0QGbCFET9iWeSkoe6GiIiI3GBqa3steDhgmpEgIiLDT9sa+P9dSCM+/HBc1xBBRESkzbLISYTfqmuF3NjCb/VXiCAiIiLDlmokiIjI8FKdR2pqDtWt//SfMpf7eitMLCIi33q//elsXs3/mOzzf6Gqrn6ouyPiND8vT6aFfF8hgoiIiAxrChJERGT4GeGGp18I90yfReQdWitYREScsyxykgZjRURERESuAdVIEBERp133Ggki8o2iGgkiIiIiIiKDTzUSRERERERERERERERkSClIEBERERERERERERERhxQkiIiIiIiIiIiIiIiIQwoSRERERERERERERETEIQUJIiIiIiIiIiIiIiLikIIEERERERERERERERFxSEGCiIiIiIiIiIiIiIg4pCBBREREREREREREREQcUpAgIiIiIiIiIiIiIiIOKUgQERERERERERERERGHFCSIiIiIiIiIiIiIiIhDChJERERERERERERERMQhBQkiIiIiIiIiIiIiIuKQggQREREREREREREREXFIQYKIiIiIiIiIiIiIiDikIEFERERERERERERERBxyG+oO9KSkpIQzZ85QVlbGpUuXABg5ciRBQUGMGzeO0NDQIe6hiIiIiIiIiMiNzWKxkJubS1lZGS0tLU5t4+LiQlBQEFFRUZhMpmvcQxERGWouLc5eIa6jiooKDh06hNVqxcvLi+DgYHx8fACoqamhtLSUuro6jEYjs2bNIiAgYIh7LCLy7VBdXY2bmxuurq64uLi0P0REnNHS0tL+aG5upqmpCV9f36HuloiIyLeaxWLhjTfewM/Pj7CwMKd/v29paaG4uJiqqiri4+MVJoiIDKHa2tprfoxhFySUlJSQkZHBLbfcQkxMDBMnTuy23cmTJzly5AhfffUVCxcu1OwEEZHroLq6GldXV9zc3BQkiEifdQwSmpqaaG5uVpAgIiIyxF599VUaGxtZsWIFrq6ufdq2ubmZbdu24e7uzrJly65RD0VEpDfXI0gYVjUSKioqyMjIIDAwkBUrVjgMEQDuuusuVqxYQWBgIBkZGVRUVFzHnoqIfDuNGGG/bAyzDFpEbjBtP0PafqaIiIjI0CkrKyMsLKzPIQKAq6srYWFhlJWVXYOeiYjIcDKs/no7dOgQt9xyC48++ije3t69tvf29ubRkKj3LQAAIABJREFURx/llltu4dChQ04epZqja2OZPjkU45grj/AZCaxKOUjxNQtvitg0JhTjmKXsrerwdNVBlk0OJXzlQS72d9cNVg5sWXnlnCbPZsGadPKret9URKQvbrrppqHugoh8g+hnioiIyNBraWkZ0CxjFxeXPt9odPFUFpuWzya8dUzGZI5lwZp0cq11/e5HnwzGWEwfXTyRzqqfmTGNCcU4ZjyTH1zJpoMWapuvUwdERAZo2AQJJSUlWK1WZsyY4VSI0Mbb25uYmBisVislJSVObfNllYXSmqufq7UWcGD7GuaYl7L38770fIg1W8lYGsuqtOwr51RjJX//SyyYcYOdi4gMe56enri5ubUvTQJXL1Wihx566NHTo+PPDDc3Nzw9PYfyR5qIiIhcdzYKU2Ix/2wdadlW2u7ltFVZyN//EotmmHl4pwXbAI9RnpPJ+qVrODBMbrC0fbiRaY+9xIFT1a3nZuOiJZu0J2N5eGvRAM9XROT6GDZBwpkzZ/Dy8uKuu+7q87YTJ07Ey8uLM2fO9GGryWz+oATrpyVYLacpys5kQ6wRGvJ45olMyvvci37ym82rBSUUpcxmVD82r81JZ/0JG4YJS9j9wWn7+RQd5DezA6Ahj/W7CnRBEpFB5eXlxU033YSLiwuXL1/udqBQRAS6Bo2XL1/GxcWFm266CS8vr6HunoiIiFxnF/evZMF2CzafaTz39jEsltZxmaJjvJscS5iHjcKtcSzbXz2Ao1jIWLqRjJxaGh01GeBYTN9YyXghk1qMzHsxiyKLfRyq4O2VRAClaVvYq5WhROQG4DbUHWhTVlZGcHBwv7cPDg7u45p8Bmhb/s/VgHdQOAs3bqT8cBxpRXmcvhhH4LW/mgyY97S1vLvcl9qfryTSo/VJDyMPJMXz2sGNFJdVUMvk63BhFJFvk5tvvnmouyAiIiIiIjcSWwGpyXnYMLN5XwrzbuvwmkcAEXEv8K7Rm+mPpZObkk7hzKeJMAxZbweRkcTXX+CL4+N5LtbY+pyBURPiSYpLYVFmEeXVQNBQ9lFEpHfDZkbCpUuX8PHx6ff2Pj4+XLp0aWCdcA0guHVCRGOHNeqKt0+/qp6CccxkpiesIe1DBwl5cx3FB19ikXl8e82CZduzO81yqGZvYod9JmZ1WZev1nLwqjUDw2esZFNWERevWj/PQMTKlUR5dNrYYMAbwO0bcdUVERERERERkRtYbU4WGQ1gWJjAg7d138Zw91JWzwQ+z+TIudYnq7JYNCYU45h1pB18iWUzJtvHUcLNPNy5PmRVFovGxJEGQB7PmNvGXdrqVQ7WWEzrflYepLZT3crwGSvZlFNx9U5vi+W5OOPVz2HAYGj9b9/rXIuIXHfDJkgYFmwlFOcBBPC9DplG2Ox4Iq5qWEfphwfZlDCNRZ2n2zVXcODJf2HOk+nkVrUuKlRj5WhKOkf70JXyw+t4+ME1V60ZWGvNJu3ZOMzLsyjvpRhP7ek88oGoaXdrNoKIiIiIiIiIDKniooMAzLs3HMe3PHox/p7JgI38Emun17LY9GQ6R9sKMjdUU7j/JRaYZ7Pp1OAs6tznsZjDO1jws6vrVtZas0lbOof1eb30qdlC4THAI46pYwel+yIi19SwCRJGjhxJTU1N7w0dqKmpYeTIkX3YwgYdLgC2siIykreQARgWTiOy41UtKI53P21dt6+1psKxLbMJxEZuShbFHZqWZq5h1eE66Ljen+U0x3fEcfXCTb7MSyvB+nZCNyeTzdZnsyjFi5jk1vXzPi3Bkr2DhUaw5azjiT0VXbdr02whIzUbPOL4+WzfPrwnIiIiIiIiIiKDrZryvwCYCA7oeeWEwNtDASiurO30SjiJOw5eGSPJy2JzrBGwkvbUGxQ3A36x7Po0k0QAzGzOaxvL2cE8Pxj8sRgrxbbZbN5XYD/O2WPsWmgEbGRkZneZ7dBR7bF0Uj+HiDU/I0IzEkTkBjBsgoSgoCBKS0v7vX1paSlBQX1ZUK6AZ6Zemc5mmhbH+iwrBtMSdq+e3EM6DrgaCH5oKYl3Ap+fprhtGp2tgIytRUA4G95OIXFCgH16mquBwOjZRDnZs/LD6RxogMDEnfwmzoR36wXFEGRmw8srCQQK383D0btVnpXCVquBqOSlVwciIiIiIiIiIiJDZhSGzkszd/ZPjl4Yz4xo45UxEj8T8zZuY0M48PkOfl80sJ71dywmMfkF5t3p1do4gKhFCUQC5Fg6LXHdQUMBqVsOYjMu4bnYgIF1XETkOhk2QcK4ceOoq6vjk08+6fO2J0+epK6ujnHjxg2oD5HL08nbt5KI7i5qVUXs3bKSOW11D8bMZv25Tm0sJ9jbAMxO4MHOS985rY6Sk/arX4y5m+l+pnBiAM5Zqehulpw1kyfW5mGIfoF/f0izEURERERERERkuLBysZfFKGxf9WGZIlcjkXNMgI3SzxzUsXTKAMZiOgcffgGE9XgsG7lblpL2uZHlm5d+QwpKi8i3wbAJEkJDQzEajRw9epTa2s7T1xyrra3lyJEjGI1GQkND+3DEK1PcLG8nEAzkHz5BeVPXlrZTKcyZEcczadkUV/VwQWv+GhuA3yh7oeN+sfFl2+l3l8K7tl1hKvii88W32cL2/72RQg8z/548W7URRERERERERGQY8CV4DEAF5z+r67FledlpACLvcO7myO94DMboxwDGYhy27V7t4XUsy7QRvHwjSeFKEUTkxjFsggSAWbNm8dVXX/HWW285FSbU1tby1ltv8dVXXzFr1qx+H9cwYQWbE41g3ckzKUVcFRXYCti0eCfFDQYilqdz/OTp1vX18thsdrDDhlr6X+bHwHd6SiGa2/Z8dUFosFGY+rR9SaN1a3nAr98dEBEREREREZFvCRcXF1paWvq9fUtLCy4uLr22Cx47G4ADR47jcMSn2Ur+exYggCljnVvy54vqzkWZ+6O/YzF9VHWQVc8exGZMYPPPeyo6LSIy/AyrICEgIICFCxdSXl7Otm3bOHnypMO2n3zyCdu2baO8vJyFCxcSEDCQNeUMRCRtJNEIpWlr2XqqQwxwLo+MBiA2hd0rJxPo3cOPeZ/b7NPX9ueR39Dfvnjx/fEmAI6esHR51fZhNhkA4Ua+36ErtlPbeGa7FUP0WjY8pPX1RERERERERKR3QUFBFBcX09zc3Odtm5ubKS4udqpmpXd0LAs9gMM7SD3V/e2X5fu3sKkIMMYSNcaZDljI/a8KIIAJoZ1nMNjA6VPq31hMnzRXsDd5HbkNRhJ/taL7ZbVFRIYxt6HuQGehoaEsX76cQ4cO8c4773DkyBGCg4Px8bFHvjU1NZSWllJXV4fRaCQ+Pn6AIUIrj3BWb15C7rydpD2/jRn7nrb/UPfwJhAoP11AYY2ZyC7Jc4cLk9HMvHBYX5TJssVe7Nq8iIgALwzYKC8qcFgcubPgaXFEvbCO3JSnWW/awXP32os2157LZNWKTGxA1PzpBLZt0FDE1ufTKfUws3ldLIGuA343RERERERERORbICoqijfeeINt27YRFhbm1OwCsM9EKC4upqqqivj4+N43MEwmKdnM3jV5pC1OwLB9C0l328c7aKggP30dy1IKsBFAYnI8YV3GNv5C4blqwky+GFzBVlZExitL2Po5EB5PTHvw4Evw3cCJAtJ2FzBj9eT2wsk96fNYTB+V79/I+hwbwYkbWT1BcxFE5Mbj0jKQ+WvXWElJCWfOnKGsrIxLly4BMHLkSIKCghg3blwfayK0qWZvopln8sxsztvBvKuWALJRmBLLw9utBCakc+zZyRiarWT8bDbrixzvMeLZg7yb0Fpd+fMsFs1aR67DGQmdjnvqJYw/SwfzCxSkxbbXNSjPWsr0Z/O6XSLJe+YW3ntldmtgYCP/xTksSK9w3MFO+xYRERERERERaWOxWMjNzaWsrMzpZY5cXFwICgoiKioKk8nk5JFsFKbEsWC7xcGS0F7EvJjFq7EdbhitymKReR25jnbpYWbzoR3Mu+3KUxf3L8W8ptOYStwOLMlm+3JCAx6LaRtbgsS3S3huQseWRWwaE0caCbz76dNEgH2saGoP50B3+xERcV5fag7317CbkdBRaGhoP8OC/jIQsXQjyw/HsT19KZvuOcEGs5GFbxzEsGUtmzKLqMXAKJOZBx9LYF5oCalPpHDgxS3sndkaDtwWy64jAaS9ksJrx4q42ADexslEPRyKbUs6R53sSWDsDgpCD5KauoO92VZqAW/jNOYlLSVppqk9Tbd9+BKLegoRRERERERERER6YDKZ+hAGDISBiJVZ5P04i9d2pbePdxj8TERFx/LY0jgiHdZ8nEbiGgOFv8umsMoGPkYiZ8axenkcEZ3unBz1UArvNb/EM1syKawBPHwJq63lC+hxRoGzYzF9U0HGEz2HCCIiN4JhPSNBRERERERERES+xdpnJHS4w19ERK5yPWYkDKtiyyIiIiIiIiIiIiIiMrwoSBAREREREREREREREYcUJIiIiIiIiIiIiIiIiEOqkSAiIiIiIiIiIiIicoNSjQQRERERERERERERERlSChJERERERERERERERMQhBQkiIiIiIiIiIiIiIuKQggQREREREREREREREXFIQYKIiIiIiIiIiIiIiDikIEFERERERERERERERBxSkCAiIiIiIiIiIiIiIg4pSBAREREREREREREREYcUJIiIiIiIiIiIiIiIiEMKEkRERERERERERERExCEFCSIiIiIiIiIiIiIi4pCCBBERERERERERERERcUhBgoiIiIiIiIiIiIiIOKQgQUREREREREREREREHFKQICIiIiIiIiIiIiIiDilIEBERERERERERERERhxQkiIiIiIiIiIiIiIiIQwoSRERERERERERERETEIQUJIiIiIiIiIiIiIiLikIIEERERERERERERERFxSEGCiIiIiIiIiIiIiIg4pCBBREREREREREREREQcUpAgIiIiIiIiIiIiIiIOKUgQERERERERERERERGHFCSIiIiIiIiIiIiIiIhDChJERERERERERERERMQhBQkiIiIiIiIiIiIiIuKQggQREREREREREREREXFIQYKIiIiIiIiIiIiIiDikIEFERERERERERERERBxyG+oO9KSkpIQzZ85QVlbGpUuXABg5ciRBQUGMGzeO0NDQIe6hiIiIiIiIiMiNzWKxkJubS1lZGS0tLU5t4+LiQlBQEFFRUZhMpmvcQxERGWouLc5eIa6jiooKDh06hNVqxcvLi+DgYHx8fACoqamhtLSUuro6jEYjs2bNIiAgYIh7LCIiIiIiIiJy47FYLLzxxhv4+fkRFhaGi4uLU9u1tLRQXFxMVVUV8fHxChNERIZQbW3tNT/GsAsSSkpKyMjI4JZbbiEmJoaJEyd22+7kyZMcOXKEr776ioULF2p2goiIiIiIiIhIH7366qs0NjayYsUKXF1d+7Rtc3Mz27Ztw93dnWXLll2jHoqISG+uR5AwrGokVFRUkJGRQWBgICtWrHAYIgDcddddrFixgsDAQDIyMqioqLiOPRURERERERERufGVlZURFhbW5xABwNXVlbCwMMrKyq5Bz0REZDgZVkHCoUOHuOWWW3j00Ufx9vbutb23tzePPvoot9xyC4cOHXLyKNUcXRvL9MmhGMdceYTPSGBVykGKr1l4U8SmMaEYxyxlb1WHp6sOsmxyKOErD3Kxv7u+WEDamjgmh7eez+TZLFiTTn5V75uKiIiIiIiIyLdXS0uL08sZdcfFxcXpugptLp7KYtPy2YS3jsmYzLEsWJNOrrWu3/3ok8EYi+kTG6UHX2LZjMmt41DjmfzgSjYdtFDbfF06ICIyYMMmSCgpKcFqtTJjxgynQoQ23t7exMTEYLVaKSkpcWqbL6sslNZc/VyttYAD29cwx7yUvZ/3pedDr/ZkFlv3F3GxofWJGiv5+19iwYxYthfZhrRvIiIiIiIiIiJ2NgpTYjH/bB1p2Vba7uW0VVnI3/8Si2aYeXinhYGNZNgoz8lk/dI1HBguN1g2Wzmams7R9qDExkVLNmlPxmJ+8nqFGSIiAzNsgoQzZ87g5eXFXXfd1edtJ06ciJeXF2fOnOnDVpPZ/EEJ1k9LsFpOU5SdyYZYIzTk8cwTmZT3uRf95DebVwtKKEqZzah+7sJ7egLPJbzAewWt51N0jF0LjdBgYWuqLkgiIiIiIiIiMvQu7l/Jgu0WbD7TeO7tY1gsV8Yx3k2OJczDRuHWOJbtrx7AUSxkLN1IRk4tjY6aDMJYTJ+4mli4cgnL01vP2XKagn1rifKA2sPreO3U9eiEiMjADJsgoaysjODg4H5vHxwc3Mc1+QzQtvyfqwHvoHAWbtxIogdQlMfpG2n03dXEwmdjCfNp/bdHAFGLEogEOFlx/UIREREREREREZHu2ApITc7DhpnN+1JInBCAoW1cxiOAiLgXeHdHAoHYyE1Jp/AbtsCC98yVrL6n9ZxdDYy6M46fzwewUVo+kOBEROT6GDZBwqVLl/Dx8em9oQM+Pj5cunRpYJ1wDSC4dUJEY4c16oq3T7+qnoJxzGSmJ6wh7UMHP+ib6yg++BKLzOPbaxYs257daUC/mr2JHfaZmNVl5kCt5eBVawaGz1jJpqwiLvZh/TzDzFD6H8+IiIiIiIiIiAxcbU4WGQ1gWJjAg7d138Zw91JWzwQ+z+TIudYnq7JYNCYU45h1pHWsMxBu5uHO9SGrslg0Jo40APJ4xtw27tJWr3KwxmJa97PyILUNVg5sWdleizN8xko25VT04Z0xMiXUtw/tRUSGxrAJEoYFWwnFeQABfK9DphE2O56IqxrWUfrhQTYlTGNR5+l2zRUcePJfmPNkOrlVrfF5jZWjKekc7UNXyg+v4+EH11y1ZmCtNZu0Z+MwL8+ivKcwoaGC3F3p5PtM49+TpuF8xQkRERERERERkcFXXHQQgHn3hmNw2MqL8fdMBmzkl1g7vZbFpic71BloqKZw/0ssMM9m06nBmb7Q57GYwztY8LNYVqVlt9firLVmk7Z0DuvzeuhTs42L5zJ5bY+BsOUbWThmULovInJNDZsgYeTIkdTU1PTe0IGamhpGjhzZhy1s0OECYCsrIiN5CxmAYeE0Ijte1YLiePfT1nX7WmsqHNsyu3W6XRbFHZqWZq5h1eE66Ljen+U0x3fEdZoZ4Mu8tBKsbyd0czLZbH02i1K8iEnOoqh1zUBL9g4WGsGWs44n9nSXbrcm4uHTWXRyPK/uTeEBBym/iIiIiIiIiMj1UU35XwBMBAc4jhEAAm8PBaC4srbTK+Ek7jh4ZYwkL4vNsUbAStpTb1DcDPjFsuvTTBIBMLM5r20sZwfz/GDwx2KsFNtms3lfgf04Z1trVmIjIzO7+5qVp17CaBrP5Lk7qF2WzrsrewpWRESGj2ETJAQFBVFaWtrv7UtLSwkKCurDFgU8M/XKdDbTtDjWZ1kxmJawe/Xknn+IuxoIfmgpiXcCn5+muG0ana2AjK1FQDgb3u6w3p+rgcDo2UQ52bPyw+kcaIDAxJ38Js6Ed+uagYYgMxteXkkgUPhuHj2+W5Yslj0Yx/Zz37BFBUVERERERETkBjUKg0cvTf7J0QvjmRFtvDJG4mdi3sZtbAgHPt/B74sG1rP+jsUkJr/AvDu9Wht3qFmZY+mlZmU1hVvjmPNsds+rToiIDBPDJkgYN24cdXV1fPLJJ33e9uTJk9TV1TFu3LgB9SFyeTp5+1YS0d1FraqIvVtWMqet7sGY2aw/16mN5QR7G4DZCTxo7G8v6ig5ab/6xZi7SaVN4cQAnLNS0SUjaE3Wi46xK8GEoaGIrb/c9o0rUCQiIiIiIiIiNyIrF3tZjML2VR8GMVyNRM4xATZKPxtIweIBjMV0Dj78Agjr6VATnsZqOU3BvrXE+EBp1krWd142W0RkGBo2QUJoaChGo5GjR49SW9t5+ppjtbW1HDlyBKPRSGhoaB+OeGWKm+XtBIKB/MMnKG/q2tJ2KoU5M+J4Ji2b4qqe1rj7GhuA36gB1CWw8WXb6XeXwru2Xc4q+MLRxdcjgKhnd7LBDHyezpHT/e6MiIiIiIiIiMgA+RI8BqCC85/V9diyvMw+iBF5h3MFiL/jMWqAfYNBGYvp0rbnNqPujOM3v00gEMj9/fFeZi+IiAy9YRMkAMyaNYuvvvqKt956y6kwoba2lrfeeouvvvqKWbNm9fu4hgkr2JxoBOtOnkkp4qqowFbApsU7KW4wELE8neMnT7eur5fHZrODHTbU0v9JAAa+01MK0dy256sLQnfVdpGG0s+VbIuIiIiIiIhIVy4uLrS0tPR7+5aWFlxcXHptFzx2NgAHjhzH4YhPs5X89yxAAFPGBjh1/C+qOxdl7o/BGovp41FvM/J9gBPW7uspiIgMI8MqSAgICGDhwoWUl5ezbds2Tp486bDtJ598wrZt2ygvL2fhwoUEBDh3gemegYikjSQaoTRtLVtPdYgBzuWR0QDEprB75WQCvXtIln1us09f259HfkN/++LF98ebADh6wtLlVduH2WQAhBv5fo8ht43a1pQ8+DbnUnwRERERERER+XYJCgqiuLiY5ua+L9Tf3NxMcXGxUzUrvaNjWegBHN5B6qnub78s37+FTUWAMZaoMc50wELuf1UAAUwI7Tz2YQOnT2mwxmL6qLbWHiDcbWQw5lWIiFxLbkPdgc5CQ0NZvnw5hw4d4p133uHIkSMEBwfj42OPfGtqaigtLaWurg6j0Uh8fPwAQ4RWHuGs3ryE3Hk7SXt+GzP2PW2vleDhTSBQfrqAwhozkV2S5w4XJqOZeeGwviiTZYu92LV5EREBXhiwUV5U0HNx5A6Cp8UR9cI6clOeZr1pB8/day/aXHsuk1UrMrEBUfOnE9i2wbl0Vh0PZXXCZAI9AFs1xQdT2JQFeMQyoS8rPomIiIiIiIjIt0ZUVBRvvPEG27ZtIywszKnZBWCfiVBcXExVVRXx8fG9b2CYTFKymb1r8khbnIBh+xaS7raPd9BQQX76OpalFGAjgMTkeMJcO+/gLxSeqybM5IvBFWxlRWS8soStnwPh8cS0Bw++BN8NnCggbXcBM1ZPbi+c3JM+j8X0SR1HX9zCl3NW8mB7/wtIXb+NYiDYPL6f+xURuX6GXZAA9pkJS5YsoaSkhDNnzlBWVsaf/vQnAEaOHElwcDDjxo3rY02E3hnCl7J5eTYPb0/niRQzx56djGHMNBLDU1hflM6CyendbFXA3mNW5iUYgQAW/voFPpi1jtxTO1kwbWf/OuIXy4YXs5n+bB4ZS6fbU+8OvGduYcNDbUl7HQdee4kDh+FASucdeRGTvISY/hdsEBEREREREZFvMJPJRHx8PLm5ueTk5Di9zJGLiwtBQUHEx8djMpmc2mbUQynsLotjwfYitidMZ3uXFl7EvLiL5+7u7rb/PDbNNbOp89MeZjb/Oo7g9rAggKlzzRhO5FGalkB4WuvTcTuwJJu7FlJu06exmD46l8mm9CzK07N4ptNLBtMSNscZ+7dfEZHraFgGCW1CQ0MHPSzomYGIpRtZfjiO7elL2XTPCTaYjSx84yCGLWvZlFlELQZGmcw8+FgC80JLSH0ihQMvbmHvzB3M8wNui2XXkQDSXknhtWNFXGwAb+Nkoh4OxbYlnaNO9iQwdgcFoQdJTd3B3mwrtYC3cRrzkpaSNNPUIU33ImrpFpYbsjh6vIDSGsDHSOS905ifsIgHTF7X4o0SERERERERkW8Ik8nkdBgwMAYiVmaR9+MsXtuV3j7eYfAzERUdy2NL44j0c7TtNBLXGCj8XTaFVTb72MfMOFYvjyOi07pAox5K4b3ml3hmSyaFNYCHL2G1tXwBPd757/xYTB+ZYtmcfJHf7TlGrqUaW+vY0oz5cSTNn8yo/u5XROQ6cmkZSEUdERERERERERGRa6Uqi0XmdeSSwLufPk3EUPdHRGQYqq11WMZ+0AyrYssiIiIiIiIiIiIiIjK8KEgQERERERERERERERGHFCSIiIiIiIiIiIiIiIhDqpEgIiIiIiIiIiIiInKDUo0EEREREREREREREREZUgoSRERERERERERERETEIQUJIiIiIiIiIiIiIiLikIIEERERERERERERERFxSEGCiIiIiIiIiIiIiIg4pCBBREREREREREREREQcUpAgIiIiIiIiIiIiIiIOKUgQERERERERERERERGHFCSIiIiIiIiIiIiIiIhDChJERERERERERERERMQhBQkiIiIiIiIiIiIiIuKQggQREREREREREREREXFIQYKIiIiIiIiIiIiIiDikIEFERERERERERERERBxSkCAiIiIiIiIiIiIiIg4pSBAREREREREREREREYcUJIiIiIiIiIiIiIiIiEMKEkRERERERERERERExCEFCSIiIiIiIiIiIiIi4pCCBBERERERERERERERcUhBgoiIiPx/9u4/Lqo67///I3GhuJjUYHUboEUzWFxRCy5npUtSK9lSWVcsl2iLVj/mZenWx7za8orLD13kuuo303LLlZV2I9ZVzCWtMBPTDS9cyF+thKaxKeNmkD/Gy2QS/f5xZmAYZhR0xkF83m+3buHMmXPe5zCc1/uc1/u83iIiIiIiIiIiXimRICIiIiIiIiIiIiIiXimRICIiIiIiIiIiIiIiXimRICIiIiIiIiIiIiIiXimRICIiIiIiIiIiIiIiXnUN1Ib7WyyB2rSIiIiIiIiIiIhIQHxSXh7oJoi02zXnzp07F+hGiIiIiIiIiIiIiIhI+504ccLv21BpIxERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERHLDkb8AAAgAElEQVQRERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8UqJBBERERERERERERER8aproBtwqSp37KDi44/5e1UVNV98wVd1dfzvqVOcPXs20E0TETddunThX0JD+W5EBDE33cQP4+NJuu02EgcNCnTTRKQDUWwXUcwUUSwQ6fgUq0REri7XnDt37lygG9FeXxw6xKo1a1hXUsKXR44Eujkicol69ezJqNRUxo8dy01RUYFujogEgGK7SNsoZkpnplgg0jkoVomIXH4nTpzw+zauqERC/ddfs2TZMlYUFQW6KSLiJxPS05k6aRLhN9wQ6KaIyGWg2C5y8RQzpbNQ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A8V26QxyVpQzLgZslcZI2iuJYqZ0BIoFIv6m6zsRkavdiRMn/L6NDvNEAsD4sWMD3QQRuQLoXCFy5dDfq0hg6W9QOgJ9D0XkfHSOEBG5MnSoRMJNUVFMSE8PdDNEpAObkJ7OTVGeZiwTkY5IsV0kcBQzpaNQLBARbxSrRESuHB0qkQAwddIkTGFhgW6GiHRAprAwpk6aFOhmiEg7KbaLXH6KmdLRKBaIiDvFKhGRK0uHmiPBaXVxMdm5uYFuhoh0MDmzZjEuLS3QzRCRi6DYLnJ5KWZKR6RYICKuFKtERHznqpsjwWlcWpoefRWRFiakp6uTKXIFU2wXuXwUM6WjUiwQESfFKhGRK0+HfCLBafrMmWzcvDnQzRCRABuRksKiefMC3QwR8QHFdhH/UsyUK4FigcjVTbFKRMT3rtonEpwWzZvHiJSUQDdDRAJInUyRzkWxXcR/FDPlSqFYIHL1UqwSEblydehEAhidTD3+KnJ1mpCerk6mSCek2C7ie4qZcqVRLBC5+ihWiYhc2Tp0aSNXq4uLmffSS9hOngx0U0TEz0xhYcz85S9VM1Okk1NsF7l0iplypVMsEOn8FKtERPzvcpQ2umISCQD1X3/NkmXLWFFUFOimiIifTEhPZ+qkSYTfcEOgmyIil4Fiu8jFU8yUzkKxQKTzUqwSEbk8lEjw4otDh1i1Zg3rSkr48siRQDdHRC5Rr549GZWayvixY7kpKirQzRGRAFBsF2kbxUzpzBQLRDoHxSoRkctPiYQ2qNyxg4qPP+bvVVXUfPEFX9XV8b+nTnH27NlAN01E3HTp0oV/CQ3luxERxNx0Ez+MjyfptttIHDQo0E0TkQ5EsV1EMVNEsUCk41OsEhHpOJRIEBERERERERERERERry5HIqGL37cgIiIiIiIiIiIiIiJXLCUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEKyUSRERERERERERERETEq66BboCIiIh0br/duo339+3nn7aTgW6KtNP3TGHcfcvN/PuQwYFuioiIiIiIiATQNefOnTsX6EaIiIhI5zT1rbXssB4OdDPkEg0y38iSn44OdDNERERERETEgxMnTvh9Gx3uiQSNWhR/0+hKEZHL47dbtymJ0EnssB7mt1u3KXaKyEX7+uuvOXXqFGfOnOGaa64JdHNE5Apx7tw5unbtSmhoKDfccEOgmyMiclXrUE8kaNSiXE4aXSki4l/j/lCogQGdyPdMYax+KCPQzRCRK9A///lPGhoauOaaa1okEZRQEBFvXG9VnTt3jnPnzhESEsL3vve9ALZKRKTjuqqeSNCoRbncNLpSRMS/lEToXPT7FJGLcfToUb799luCgoLo0qVLU/JASQQRuRBnMuHcuXOcPXuWb7/9lqNHj9KjR48At0xE5OrUYRIJ7+/bH+gmyFXo/X37lUgQEREREfGT06dPNyURunTpAiiJICJt50wmnD17lrNnz3L69OkAt0hE5OrVYRIJGuUmgaDvnYiIiIiI/5w7d46goCCuueaapv8rkSAibeUsawRGErKxsTHALRIRuXp1mESCiIiIiIiIdC7OJxFcSxupvJGIXIhrWaNz5841JRE60DSfIiJXHSUSRERERERExC+ciQTnf3oiQUTawnmecH0iwfVnERG5/JRIEBEREREREb9xJg+uueaapnkSRETa4pprruHs2bNKQoqIdABKJIiIiIiIiIhfuCYRVNJIRNrLWdbI/TwiIiKXn4aDiIiIiIiIiIiIiIiIV0okiIiIiIiIiF/oKQQR8QWdS0REAk+JBBEREREREfEb3fgTEV/QuUREJLCUSBAREREREREREREREa+USBAREREREREREREREa+USBAREREREREREREREa+USBAREREREREREREREa+USBAREREREREREREREa+USBAREREREREREREREa+6BroBIiIiIudnYqTlRzzwAzOxYcHGS2cbsdtt7D7wdxaX7mFvYBvYDgNYPMlCYkgbF2+wsnjZOgrbsd6aqt/xwMZLa6WIiIiIiIiIKz2RICIiIh2YiYy0NGYnxTQnEQC6BBF8bXcS+93O0od/TEa3wLVQREREREREpLPTEwkiIiLSYSUO/zGPRocCjVj/sYvXt1fzdq0Nc2QcowcMYHxMd8LConn03hT2Fm6mMtANvqBdTFu2y+21FN58LI4Y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"},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":null},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"}],"retries":0,"parent":"first test suite","state":"failed","events":[{"type":"Error","name":"Error","message":"Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)","stack":"Error: Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)\n    at createTimeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\errors.js:498:15)\n    at Test.Runnable._timeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:431:10)\n    at Timeout.<anonymous> (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:246:24)\n    at listOnTimeout (internal/timers.js:554:17)\n    at processTimers (internal/timers.js:497:7)"}],"errorIndex":1,"end":"2021-06-08T10:41:15.469Z","errors":[{"name":"Error","message":"Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)","stack":"Error: Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)\n    at createTimeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\errors.js:498:15)\n    at Test.Runnable._timeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:431:10)\n    at Timeout.<anonymous> (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:246:24)\n    at listOnTimeout (internal/timers.js:554:17)\n    at processTimers (internal/timers.js:497:7)","type":"Error"}],"error":{"name":"Error","message":"Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)","stack":"Error: Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)\n    at createTimeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\errors.js:498:15)\n    at Test.Runnable._timeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:431:10)\n    at Timeout.<anonymous> (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:246:24)\n    at listOnTimeout (internal/timers.js:554:17)\n    at processTimers (internal/timers.js:497:7)","type":"Error"}}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2021-06-08T10:40:15.312Z","_duration":60157,"uid":"test-00-0","cid":"0-1","title":"deals with webElements","fullTitle":"first test suite deals with webElements","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://rahulshettyacademy.com/AutomationPractice/"},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://rahulshettyacademy.com/AutomationPractice/"},"result":{"value":null},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"xpath","value":"//input[@value=\"radio1\"]"},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"xpath","value":"//input[@value=\"radio1\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"6541a1f4-4723-4de9-9678-456f21c6d780"}},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/6541a1f4-4723-4de9-9678-456f21c6d780/click","body":{},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/6541a1f4-4723-4de9-9678-456f21c6d780/click","body":{},"result":{"value":null},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/6541a1f4-4723-4de9-9678-456f21c6d780/selected","body":{},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/6541a1f4-4723-4de9-9678-456f21c6d780/selected","body":{},"result":{"value":true},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"xpath","value":"//a[text() = \"Latest News\"]"},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"xpath","value":"//a[text() = \"Latest News\"]"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"result":{"value":true},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementInViewport(elem) {\n    if (!elem.getBoundingClientRect) {\n        return false;\n    }\n    const rect = elem.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n    return (vertInView && horInView);\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementInViewport(elem) {\n    if (!elem.getBoundingClientRect) {\n        return false;\n    }\n    const rect = elem.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n    return (vertInView && horInView);\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"result":{"value":false},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"result":{"value":true},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementInViewport(elem) {\n    if (!elem.getBoundingClientRect) {\n        return false;\n    }\n    const rect = elem.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n    return (vertInView && horInView);\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementInViewport(elem) {\n    if (!elem.getBoundingClientRect) {\n        return false;\n    }\n    const rect = elem.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n    return (vertInView && horInView);\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"e2605be3-74c5-4d08-a91a-762a5e2b43ab","ELEMENT":"e2605be3-74c5-4d08-a91a-762a5e2b43ab"}]},"result":{"value":false},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":null},"sessionId":"f0b78639ab7fb9c6e27f6a6222003683","cid":"0-1","type":"result"}],"retries":0,"parent":"first test suite","state":"failed","events":[{"type":"Error","name":"Error","message":"Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)","stack":"Error: Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)\n    at createTimeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\errors.js:498:15)\n    at Test.Runnable._timeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:431:10)\n    at Timeout.<anonymous> (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:246:24)\n    at listOnTimeout (internal/timers.js:554:17)\n    at processTimers (internal/timers.js:497:7)"}],"errorIndex":1,"end":"2021-06-08T10:41:15.469Z","errors":[{"name":"Error","message":"Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)","stack":"Error: Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)\n    at createTimeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\errors.js:498:15)\n    at Test.Runnable._timeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:431:10)\n    at Timeout.<anonymous> (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:246:24)\n    at listOnTimeout (internal/timers.js:554:17)\n    at processTimers (internal/timers.js:497:7)","type":"Error"}],"error":{"name":"Error","message":"Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)","stack":"Error: Timeout of 60000ms exceeded. The execution in the test \"first test suite deals with webElements\" took too long. Try to reduce the run time or increase your timeout for test specs (https://webdriver.io/docs/timeouts). (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js)\n    at createTimeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\errors.js:498:15)\n    at Test.Runnable._timeoutError (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:431:10)\n    at Timeout.<anonymous> (C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\node_modules\\mocha\\lib\\runnable.js:246:24)\n    at listOnTimeout (internal/timers.js:554:17)\n    at processTimers (internal/timers.js:497:7)","type":"Error"}}],"uid":"suite-0-0","cid":"0-1","file":"C:\\Users\\Pradeep\\Desktop\\demo_webdriverIO\\test\\specs\\firstTest.js","title":"first test suite","fullTitle":"first test suite","parent":"","end":"2021-06-08T10:41:15.473Z"}],"title":"Test Report Title"}